{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mainConteiner","display","flexDirection","sizeTable","border","align","cellPadding","margin","fontSize","sizeStr","padding","borderRadius","width","search","paddingTop","Str","props","tableData","id","fullname","date_submited","position","organization","org_type","territory","location","vid","birthdate","gualification_category","plan_attestation_year","workflow","style","App","useState","text","setText","dataCo","data","teachers","map","item","i","undefined","trim","field","indexOf","push","key","className","placeholder","value","onChange","event","target","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ogyDAIMA,EAAgB,CAClBC,QAAS,OACTC,cAAc,UAEZC,EAAY,CACdC,OAAQ,iBACRC,MAAO,SACPC,YAAa,KACbC,OAAQ,MACRC,SAAU,QAGRC,EAAU,CACZL,OAAQ,iBACRM,QAAS,MACTC,aAAc,MACdC,MAAO,MAGLC,EAAS,CACXC,WAAW,QAIf,SAASC,EAAIC,GAAQ,IAAD,EAI+CA,EAAMC,UAHhEC,EADW,EACXA,GAAIC,EADO,EACPA,SAAUC,EADH,EACGA,cACfC,EAFY,EAEZA,SAAUC,EAFE,EAEFA,aAAcC,EAFZ,EAEYA,SACxBC,EAHY,EAGZA,UAAWC,EAHC,EAGDA,SAAUC,EAHT,EAGSA,IAAKC,EAHd,EAGcA,UAC1BC,EAJY,EAIZA,uBAAwBC,EAJZ,EAIYA,sBAAuBC,EAJnC,EAImCA,SACnD,OAAO,4BACH,wBAAIC,MAAOtB,GAAUS,GACrB,wBAAIa,MAAOtB,GAAUU,GACrB,wBAAIY,MAAOtB,GAAUW,GACrB,wBAAIW,MAAOtB,GAAUY,GACrB,wBAAIU,MAAOtB,GAAUa,GACrB,wBAAIS,MAAOtB,GAAUc,GACrB,wBAAIQ,MAAOtB,GAAUe,GACrB,wBAAIO,MAAOtB,GAAUgB,GACrB,wBAAIM,MAAOtB,GAAUiB,GACrB,wBAAIK,MAAOtB,GAAUkB,GACrB,wBAAII,MAAOtB,GAAUmB,GACrB,wBAAIG,MAAOtB,GAAUoB,GACrB,wBAAIE,MAAOtB,GAAUqB,IA+CdE,MA3Cf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,KAEPC,EAAS,GAsBb,OArBAC,EAAKC,SAASC,IAAI,SAACC,EAAMC,GAErB,QAAYC,IAATF,EAEC,GAAmB,KAAhBN,EAAKS,QACJ,IAAI,IAAIC,KAASJ,EACb,GAAIA,EAAKI,GAAOC,QAAQX,IAAS,EAAG,CAChCE,EAAOU,KAAK,kBAAC/B,EAAD,CAAKE,UAAWuB,EAAMO,IAAKN,KACvC,YAKRL,EAAOU,KAAK,kBAAC/B,EAAD,CAAKE,UAAWuB,EAAMO,IAAKN,OAS/C,yBAAKO,UAAU,OACX,yBAAKjB,MAAO/B,GACR,yBAAK+B,MAAOlB,GACR,2BAAOoC,YAAY,iCAAQC,MAAOhB,EAAMiB,SARrC,SAACC,GAChBjB,EAAQiB,EAAMC,OAAOH,WASb,2BAAOnB,MAAO5B,GACV,+BAEAiC,EAAOG,IAAI,SAACC,GACR,OAAOA,SCxEXc,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.237f3d54.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport data from './test1'\n\nconst mainConteiner = {\n    display: \"flex\",\n    flexDirection:\"column\"\n};\nconst sizeTable = {\n    border: \"1px solid #ccc\",\n    align: \"center\",\n    cellPadding: \"20\",\n    margin: \"1em\",\n    fontSize: \"14px\",\n\n};\nconst sizeStr = {\n    border: \"1px solid #ddd\",\n    padding: \"5px\",\n    borderRadius: \"3px\",\n    width: \"5%\"\n};\n\nconst search = {\n    paddingTop:\"20px\",\n};\n\n\nfunction Str(props) {\n    let {id, fullname, date_submited,\n        position, organization, org_type,\n        territory, location, vid, birthdate,\n        gualification_category, plan_attestation_year, workflow} = props.tableData;\n    return <tr>\n        <td style={sizeStr}>{id}</td>\n        <td style={sizeStr}>{fullname}</td>\n        <td style={sizeStr}>{date_submited}</td>\n        <td style={sizeStr}>{position}</td>\n        <td style={sizeStr}>{organization}</td>\n        <td style={sizeStr}>{org_type}</td>\n        <td style={sizeStr}>{territory}</td>\n        <td style={sizeStr}>{location}</td>\n        <td style={sizeStr}>{vid}</td>\n        <td style={sizeStr}>{birthdate}</td>\n        <td style={sizeStr}>{gualification_category}</td>\n        <td style={sizeStr}>{plan_attestation_year}</td>\n        <td style={sizeStr}>{workflow}</td>\n    </tr>\n}\n\nfunction App() {\n    let [text, setText] = useState(\"\");\n    let dataCo = [];\n    data.teachers.map((item, i) =>\n    {\n        if(item !== undefined)\n        {\n            if(text.trim() !== \"\"){\n                for(let field in item) {\n                    if (item[field].indexOf(text) > -1) {\n                        dataCo.push(<Str tableData={item} key={i}/>);\n                        break;\n                    }\n                }\n            }\n            else\n                dataCo.push(<Str tableData={item} key={i}/>);\n        }\n    });\n\n    let handleChange = (event) => {\n        setText(event.target.value)\n    };\n\n    return (\n        <div className=\"App\">\n            <div style={mainConteiner}>\n                <div style={search}>\n                    <input placeholder=\"Поиск\" value={text} onChange={handleChange}/>\n                </div>\n                <table style={sizeTable}>\n                    <tbody>\n                 {\n                    dataCo.map((item) => {\n                        return item\n                    })\n                }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}